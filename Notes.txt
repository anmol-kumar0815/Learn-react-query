1. When a fetch request fails react query automatically retry(make an API call again) to fetch data.

Caching in useQuery
2. When useQuery make an api call for the first time and it receive data from api it will cache the data, means if you refresh the
page you will not see loading... because it is displaying the cache data, value of "isLoading" state will always false in this case.

=> But there can be a case when data in database was updated and useQuery is showing cache data

=> For handing this case useQuery provide one more state as "isFetching", basically what happen is when useQuery have cache data
it will display the cache data to the ui but it will make an api call in background to get the updated data and that api call is
completed or not can be identify by "isFetching" state if it is false then data fetched successfuly, if it is true that means
api call is running in background

Note: the default cache store time is 5 minutes after that cache data will go to garbage.

=> if you want to change this default time pass third argument to the useQuery as { cacheTime: 5000 }, means 5 sec.

StaleTime in useQuery
3. When you have cache data and don't want to make an background fetch api call every time, means in your application if user see
stale data for some time that is not a problem then you can set staleTime to 3000 sec then an background api call will be made after every 3 sec
not every time you visit again.

Note: Default staleTime is 0.

example: in weather app you want to refresh temperature on after 10 1 hours in this case set staleTime to 3600000 sec.
this will reduce number of API call.

Refetch using useQuery
4. Case1: when you want to fetch data after click on a button in that case pass { enable: false, } as third argument in useQuery
  and use refetch function in onClick event.
  Case2: when you want to fetch the data from another component then pass refetch as a prop in another componentand call this refetch
  from another component. Note: in this case no need to pass { enable: false, } as third argument in useQuery.

Callback function
5. onSuccess will only run if api call is successful.
    onError will only run if api call is failed.

Select in useQuery
6. If you want to format the api data before showing it on frontend like changing object keys from snakecase to camelcase you can do it
with passing { select, callbackfunction, } as third argument in useQuery. and inside callbackfunction format the data as per need.

CustomHook for useQuery
7. When you want to make same api call like fetch superHeroes at many places in your codebase, one option is to write useQuery everytime
which is not a good idea, so what you can do is just create a customHook.
